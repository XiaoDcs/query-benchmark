name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: npm run build:mac
      
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: npm run build:win
      
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: macos-builds
        path: |
          dist/*.dmg
          dist/*.zip
          
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: windows-builds
        path: |
          dist/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Web Page Scorer ${{ github.ref }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const uploadAsset = async (filePath, name) => {
            const contentType = name.endsWith('.dmg') ? 'application/x-apple-diskimage' :
                              name.endsWith('.zip') ? 'application/zip' :
                              'application/octet-stream';
                              
            return github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              name: name,
              data: fs.readFileSync(filePath),
              headers: {
                'content-type': contentType,
                'content-length': fs.statSync(filePath).size,
              },
            });
          };
          
          // Upload macOS files
          const macFiles = fs.readdirSync('macos-builds').filter(f => f.endsWith('.dmg') || f.endsWith('.zip'));
          for (const file of macFiles) {
            await uploadAsset(path.join('macos-builds', file), file);
          }
          
          // Upload Windows files
          const winFiles = fs.readdirSync('windows-builds').filter(f => f.endsWith('.exe'));
          for (const file of winFiles) {
            await uploadAsset(path.join('windows-builds', file), file);
          } 